import os
import pytest
from dotenv import load_dotenv
from flask import Flask, render_template, request, redirect, url_for

# Load environment variables from .env file
load_dotenv()

# Initialize the Flask app
app = Flask(__name__)

# Define the settings route
@app.route('/settings', methods=['GET', 'POST'])
def settings():
    if request.method == 'POST':
        # Update environment variables
        anthropic_api_key = request.form.get('ANTHROPIC_API_KEY')
        tavily_api_key = request.form.get('TAVILY_API_KEY')
        eleven_labs_api_key = request.form.get('ELEVEN_LABS_API_KEY')
        base_url = request.form.get('BASE_URL')

        # Save the updated environment variables to the .env file
        with open('.env', 'w') as f:
            f.write(f"ANTHROPIC_API_KEY={anthropic_api_key}\n")
            f.write(f"TAVILY_API_KEY={tavily_api_key}\n")
            f.write(f"ELEVEN_LABS_API_KEY={eleven_labs_api_key}\n")
            f.write(f"BASE_URL={base_url}\n")

        # Reload the environment variables
        load_dotenv()

        return redirect(url_for('settings'))

    # Load current environment variables
    anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
    tavily_api_key = os.getenv('TAVILY_API_KEY')
    eleven_labs_api_key = os.getenv('ELEVEN_LABS_API_KEY')
    base_url = os.getenv('BASE_URL')

    return render_template('settings.html', 
                           anthropic_api_key=anthropic_api_key, 
                           tavily_api_key=tavily_api_key, 
                           eleven_labs_api_key=eleven_labs_api_key, 
                           base_url=base_url)

# Test functions
def test_settings_page(client):
    response = client.get('/settings')
    assert response.status_code == 200
    assert b'ANTHROPIC_API_KEY' in response.data
    assert b'TAVILY_API_KEY' in response.data
    assert b'ELEVEN_LABS_API_KEY' in response.data
    assert b'BASE_URL' in response.data

def test_update_settings(client):
    response = client.post('/settings', data={
        'ANTHROPIC_API_KEY': 'new_anthropic_api_key',
        'TAVILY_API_KEY': 'new_tavily_api_key',
        'ELEVEN_LABS_API_KEY': 'new_eleven_labs_api_key',
        'BASE_URL': 'new_base_url'
    }, follow_redirects=True)
    assert response.status_code == 200
    assert b'new_anthropic_api_key' in response.data
    assert b'new_tavily_api_key' in response.data
    assert b'new_eleven_labs_api_key' in response.data
    assert b'new_base_url' in response.data

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client
